@inherits LayoutComponentBase
@using AdminShellNS;
@using AasxPackageLogic;
@using AasxPackageLogic.PackageCentral;

@{
    // resharper disable all
}

@*@<div class="sidebar">
        <NavMenu />
    </div>*@
<div class="main">
    <div class="top-row px-4">
        <div class="col-12 row">
            <div class="col-6" style="text-align:left">
                <div class="row">
                    @*<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
                    *@
                    <span style="font-weight:bold">Upload:</span>
                    <InputFile OnChange="HandleFileSelected" />

                    @code {
                        // resharper disable once UnusedField.Compiler
                        IFileListEntry file;

                        async Task HandleFileSelected(IFileListEntry[] files)
                        {
                            var file = files.FirstOrDefault();
                            if (file != null)
                            {
                                var fileStream = System.IO.File.Create(file.Name);
                                await file.Data.CopyToAsync(fileStream);
                                fileStream.Close();
                                await InvokeAsync(() => Program.loadAasxFiles(false));
                                await InvokeAsync(() => Program.loadAasx(file.Name));
                                this.StateHasChanged();
                            }
                        }
                    }
                </div>
                <div class="row">
                    <span>&nbsp&nbsp&nbsp&nbsp</span>
                    <table>
                        <tr>
                            <td><span style="font-weight:bold">GET:</span></td>
                            <td>
                                @{
                                    string text = "";
                                    int ww = 80;
                                    <input size="@ww" value="@text"
                                           @onchange="@((ChangeEventArgs __e) => MyTextInput(__e.Value.ToString()))" />
                                }
                            </td>
                        </tr>
                    </table>
                    @code {
                        private async void MyTextInput(string value)
                        {
                            value = value.ToLower();
                            if (value != "" && (value.Contains("http://") || value.Contains("https://")))
                            {
                                if (value.Contains("getaasx"))
                                {
                                    await InvokeAsync(async () => await Program.getAasxAsync(value));
                                }
                                else // repo
                                {
                                    string fn = value;
                                    var fr = PackageContainerListFactory.GuessAndCreateNew(fn);
                                    // Program._packageCentral.Repositories.Add(fr);
                                    Program.repository = fr as PackageContainerListHttpRestRepository;
                                    var task = Task.Run(async () => await Program.repository.SyncronizeFromServerAsync());
                                    var r = task.Result;
                                    if (Program.repository.FileMap.Count > 0)
                                    {
                                        Program.aasxFiles = new string[Program.repository.FileMap.Count];
                                        for (int i = 0; i < Program.repository.FileMap.Count; i++)
                                        {
                                            Program.aasxFiles[i] = Program.repository.FileMap[i].InfoIds;
                                        }
                                        var repoFile = Program.repository.FileMap[0];
                                        var container = PackageContainerFactory.GuessAndCreateFor(Program._packageCentral, repoFile.InfoLocation, repoFile.InfoLocation, overrideLoadResident: true);
                                        Program.env = container.Env;
                                        Program.editMode = false;
                                        Program.thumbNail = null;
                                        Program.signalNewData(3);
                                    }
                                }
                                this.StateHasChanged();
                            }
                        }
                    }
                    <span>&nbsp&nbsp&nbsp</span>
                </div>
            </div>
            <div class="col-6">
                <div class="row">
                    @{
                        <span>&nbsp&nbsp&nbsp</span>
                        // string w = (Program.aasxFileSelected.Length * 11 + 60).ToString() + "px";
                        string w = "70%";
                        <select class="form-control selectpicker" value="@Program.aasxFileSelected" style="width:@w"
                                @onchange="@((ChangeEventArgs __e) => MyAasxSelect(__e.Value.ToString()))">
                            @foreach (var item in Program.aasxFiles)
                            {
                                <option value="@item">@item</option>
                            }
                        </select>
                        @code {
                            private async void MyAasxSelect(string value)
                            {
                                // await InvokeAsync(() => Program.loadAasx(value));
                                if (Program.repository.FileMap.Count > 0)
                                {
                                    for (int i = 0; i < Program.repository.FileMap.Count; i++)
                                    {
                                        if (value == Program.repository.FileMap[i].InfoIds)
                                        {
                                            var repoFile = Program.repository.FileMap[i];
                                            var container = PackageContainerFactory.GuessAndCreateFor(Program._packageCentral, repoFile.InfoLocation, repoFile.InfoLocation, overrideLoadResident: true);
                                            Program.env = container.Env;
                                            Program.editMode = false;
                                            Program.thumbNail = null;
                                            Program.signalNewData(3);
                                        }
                                    }
                                }
                                this.StateHasChanged();
                            }
                        }
                    }
                    <span>&nbsp&nbsp&nbsp</span>
                    <button @onclick="toggleEditMode">
                        @{
                            if (Program.editMode)
                            {
                                <span>EditMode is ON</span>
                            }
                            else
                            {
                                <span>EditMode is OFF</span>
                            }
                            Program.signalNewData(0);
                        }
                    </button>
                    @code {
                        private void toggleEditMode()
                        {
                            Program.editMode = !Program.editMode;
                            this.StateHasChanged();
                        }
                    }
                    <span>&nbsp&nbsp&nbsp</span>
                </div>
            </div>
        </div>
    </div>

    <div class="content px-4">
        @Body
    </div>
</div>
